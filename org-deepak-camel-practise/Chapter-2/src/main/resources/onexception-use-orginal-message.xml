<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:camel="http://camel.apache.org/schema/spring" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       ">




	<camelContext xmlns="http://camel.apache.org/schema/spring">
		<!-- Message will be moved to inExchangeProcessor ; whenever an exception 
			of type java.lang.Exception is thrown from any of the route -->

		<!-- By default, when an exception is raised in the middle of a route, 
			processing of the current exchange is interrupted and the thrown exception 
			is propagated back to the consumer endpoint at the start of the route. When 
			an onException clause is triggered, the behavior is essentially the same, 
			except that the onException clause performs some processing before the thrown 
			exception is propagated back. -->

		<onException>
			<exception>java.io.IOException</exception>
			<log message = "value of in header faewqwer anyname is ${in.header.anyName} "/>
			<log message = "exchange body is  ${in.body} "/>

		</onException>


		<route>
			<from uri="servlet:///onException/allroutes4" />

			<setHeader headerName="anyName">
				<constant> This is the value </constant>
			</setHeader>
			
			<setBody>
				<simple>This is the request body</simple>
			</setBody>
			<log message = "exchange body is  ${in.body} "/>
			<log message = "value of header anyname is ${in.headers} "/>
			<process ref="randomProcessor" />
			<!-- message will pass to below log processor only if there is no exception -->
			<log message="Request is being processed" />
			<transform>
				<simple>Request processed successfully</simple>
			</transform>
		</route>





	</camelContext>
</beans>